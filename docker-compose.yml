version: '3'
services:
  flask:
    # Путь до Dockerfile
    build: backend
    # Имя для создаваемого контейнера
    container_name: backend-flask
    # Создание переменных окружения в контейнере
    environment:
      # для отладки (при запуске в релиз убрать!)
      - FLASK_ENV=development
      ## Позволяет отслеживать процесс работы приложения в командной строке
      - PYTHONUNBUFFERED=True
      ##
    # Перезапускаем сервис в случае падения
    restart: on-failure
    # Прокладывам путь для файлов. Все файлы, которые хранятся у вас в
    # директории ./backend, появятся в директории контейнера /backend
    volumes:
      - ./backend:/backend
    networks:
      - mongo_network
    # Открываем порт в контейнер
    # Порт, который будет смотреть наружу : порт который используется внутри контейнера
    ports:
      - "5000:5000"
    command: gunicorn --bind 0.0.0.0:5000 flask:flask

  mongo:
    image: mongo:nanoserver
    container_name: mongoDB
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=project
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - mongo_network
    ports:
      - "27017:27017"
  mongo-express:
    image: mongo-express:0.54.0
    container_name: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongoDB
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=True
      - ME_CONFIG_MONGODB_AUTH_USERNAME=${MONGO_ROOT_USER}
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=${MONGO_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_URL="mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongoDB:27017/"
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGOEXPRESS_LOGIN}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGOEXPRESS_PASSWORD}
    networks:
      - mongo_network
    depends_on:
      - mongo
    ports:
      - "8081:8081"

  redis:
    image: redis:7.0.4
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_ROOT_PASSWORD}

    ports:
     - "6379:6379"

    volumes:
     - $PWD/redis-data:/var/lib/redis
     - $PWD/redis.conf:/usr/local/etc/redis/redis.conf

    environment:
     - REDIS_REPLICATION_MODE=master

    networks:
      - mongo_network
  nginx:
    build: ./nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - flask
      - mongo
    networks:
      - mongo_network
volumes:
  mongodb_data_container:
networks:
  mongo_network:
    driver: bridge
